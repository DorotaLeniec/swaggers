{
  "swagger": "2.0",
  "info": {
    "description": "Nordea Single SCA Payment Initiation Services API v1",
    "version": "1.0",
    "title": "Single SCA Payments API",
    "contact": {
      "name": "Open Banking team",
      "url": "https://nordeaopenbanking.com",
      "email": "support@nordeaopenbanking.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-ibm-name": "single-sca-payment-service-v1",
    "x-version": "1.0"
  },
  "host": "https://api.nordeaopenbanking.com",
  "basePath": "/personal/",
  "tags": [
    {
      "name": "single-sca-payments",
      "description": "Single strong customer authentication resource"
    }
  ],
  "paths": {
    "/v1/payments/authorization/domestic-credit-transfer": {
      "post": {
        "tags": [
          "single-sca-payments"
        ],
        "summary": "Single Strong Customer Authentication Domestic Credit Transfer payment",
        "operationId": "transferFundsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Digest",
            "in": "header",
            "description": "The Digest Header header as defined in [RFC3230] contains a Hash of the message body. The only hash algorithms that may be used to calculate the Digest within the context of this specification are SHA-256 and SHA-512 as defined in [RFC5843]. For POST with 'application/x-www-form-urlencoded' content type Digest should be calculated for normalized string created from request parameters like this: 'param1&#61;value1&#38;param2&#61;value2'. It is important that parameters should be placed in alphabetic order",
            "required": true,
            "type": "string"
          },
          {
            "name": "Signature",
            "in": "header",
            "description": "A signature of request by the TPP on application level. The process of signing a request is described in 'Signing HTTP Messages' RFC draft version 10 (<a href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-10\" target=\"_blank\">https://tools.ietf.org/html/draft-cavage-http-signatures-10</a>). The request signature needs to be sent in the 'Signature' HTTP header as described in the RFC. Additional requirements from Nordea \n - The only allowed algorithm is RSA-SHA256 \n- The key size for the used RSA key pair has to be at least 2048 bit \n- The keyId is the clientId of your application originating from the Nordea Developer Portal \n- We require the following headers to be used in the signature \n* Request without body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date \n* Request with body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date Content-type Digest \n* The request-target is a combination of the HTTP action verb and the request URI path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-IBM-Client-Id",
            "in": "header",
            "description": "Id of the Client",
            "required": true,
            "type": "string",
            "x-availabilityInfo": "V1",
            "x-availabilityStatus": "Stable"
          },
          {
            "name": "X-IBM-Client-Secret",
            "in": "header",
            "description": "Secret password generated for the Client",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-Date",
            "in": "header",
            "description": "HTTP header element for date and time represented as RFC 7231 Full Dates (GMT). Example date: **Wed, 24 Apr 2019 14:00:37 GMT**. It is similar to standard HTTP 'Date' expect that it allows to set it under JavaScript in browser while standard 'Date' is forbidden",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-Host",
            "in": "header",
            "description": "HTTP header element for specification of the domain name of the server. It is similar to standard HTTP 'Host' header but it won't be overridden by proxies. It also allows to set it under JavaScript in browser while standard 'Host' is forbidden",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-User-Agent",
            "in": "header",
            "description": "End user (i.e. PSU) agent information, to be provided if TPP is in session with the PSU",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-User-Ip",
            "in": "header",
            "description": "End user (i.e. PSU) IP address, to be provided if TPP is in session with the PSU",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Transfer fund domestic request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            },
            "x-availabilityInfo": "V1",
            "x-availabilityStatus": "Stable"
          }
        ],
        "responses": {
          "201": {
            "description": "Redirect to NASA signing page",
            "schema": {
              "$ref": "#/definitions/TransferResponse"
            }
          },
          "400": {
            "description": "Parameters invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized with failure code:\n* error.apikey.missing = Missing API key. This operation requires API key, but it was missing.\n* error.token = Unspecified error with supplied token.\n* error.token.invalid = Missing access token or token did not authorized requested operation. This operation requires valid access token, but it was missing.\n* error.token.expired = Access token has expired.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden with failure code:\n* error.resource.denied = Requested resource is not authorized by access token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "deprecated": false,
        "x-availabilityInfo": "V1",
        "x-availabilityStatus": "Stable"
      }
    },
    "/v1/payments/authorization/sepa-credit-transfer": {
      "post": {
        "tags": [
          "single-sca-payments"
        ],
        "summary": "Single SCA Sepa Credit Transfer payment",
        "operationId": "transferFundsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Digest",
            "in": "header",
            "description": "The Digest Header header as defined in [RFC3230] contains a Hash of the message body. The only hash algorithms that may be used to calculate the Digest within the context of this specification are SHA-256 and SHA-512 as defined in [RFC5843]. For POST with 'application/x-www-form-urlencoded' content type Digest should be calculated for normalized string created from request parameters like this: 'param1&#61;value1&#38;param2&#61;value2'. It is important that parameters should be placed in alphabetic order",
            "required": true,
            "type": "string"
          },
          {
            "name": "Signature",
            "in": "header",
            "description": "A signature of request by the TPP on application level. The process of signing a request is described in 'Signing HTTP Messages' RFC draft version 10 (<a href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-10\" target=\"_blank\">https://tools.ietf.org/html/draft-cavage-http-signatures-10</a>). The request signature needs to be sent in the 'Signature' HTTP header as described in the RFC. Additional requirements from Nordea \n - The only allowed algorithm is RSA-SHA256 \n- The key size for the used RSA key pair has to be at least 2048 bit \n- The keyId is the clientId of your application originating from the Nordea Developer Portal \n- We require the following headers to be used in the signature \n* Request without body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date \n* Request with body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date Content-type Digest \n* The request-target is a combination of the HTTP action verb and the request URI path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-IBM-Client-Id",
            "in": "header",
            "description": "Id of the Client",
            "required": true,
            "type": "string",
            "x-availabilityInfo": "V1",
            "x-availabilityStatus": "Stable"
          },
          {
            "name": "X-IBM-Client-Secret",
            "in": "header",
            "description": "Secret password generated for the Client",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-Date",
            "in": "header",
            "description": "HTTP header element for date and time represented as RFC 7231 Full Dates (GMT). Example date: **Wed, 24 Apr 2019 14:00:37 GMT**. It is similar to standard HTTP 'Date' expect that it allows to set it under JavaScript in browser while standard 'Date' is forbidden",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-Host",
            "in": "header",
            "description": "HTTP header element for specification of the domain name of the server. It is similar to standard HTTP 'Host' header but it won't be overridden by proxies. It also allows to set it under JavaScript in browser while standard 'Host' is forbidden",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-User-Agent",
            "in": "header",
            "description": "End user (i.e. PSU) agent information, to be provided if TPP is in session with the PSU",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-User-Ip",
            "in": "header",
            "description": "End user (i.e. PSU) IP address, to be provided if TPP is in session with the PSU",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Transfer fund sepa request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            },
            "x-availabilityInfo": "V1",
            "x-availabilityStatus": "Stable"
          }
        ],
        "responses": {
          "201": {
            "description": "Redirect to signing page",
            "schema": {
              "$ref": "#/definitions/TransferResponse"
            }
          },
          "400": {
            "description": "Parameters invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized with failure code:\n* error.apikey.missing = Missing API key. This operation requires API key, but it was missing.\n* error.token = Unspecified error with supplied token.\n* error.token.invalid = Missing access token or token did not authorized requested operation. This operation requires valid access token, but it was missing.\n* error.token.expired = Access token has expired.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden with failure code:\n* error.resource.denied = Requested resource is not authorized by access token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "deprecated": false,
        "x-availabilityInfo": "V1",
        "x-availabilityStatus": "Stable"
      }
    },
    "/v1/payments/{externalId}/status": {
      "get": {
        "tags": [
          "single-sca-payments"
        ],
        "summary": "request payment status",
        "operationId": "getStatusUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Signature",
            "in": "header",
            "description": "A signature of request by the TPP on application level. The process of signing a request is described in 'Signing HTTP Messages' RFC draft version 10 (<a href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-10\" target=\"_blank\">https://tools.ietf.org/html/draft-cavage-http-signatures-10</a>). The request signature needs to be sent in the 'Signature' HTTP header as described in the RFC. Additional requirements from Nordea \n - The only allowed algorithm is RSA-SHA256 \n- The key size for the used RSA key pair has to be at least 2048 bit \n- The keyId is the clientId of your application originating from the Nordea Developer Portal \n- We require the following headers to be used in the signature \n* Request without body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date \n* Request with body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date Content-type Digest \n* The request-target is a combination of the HTTP action verb and the request URI path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-IBM-Client-Id",
            "in": "header",
            "description": "Id of the Client",
            "required": true,
            "type": "string",
            "x-availabilityInfo": "V1",
            "x-availabilityStatus": "Stable"
          },
          {
            "name": "X-IBM-Client-Secret",
            "in": "header",
            "description": "Secret password generated for the Client",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-Date",
            "in": "header",
            "description": "HTTP header element for date and time represented as RFC 7231 Full Dates (GMT). Example date: **Wed, 24 Apr 2019 14:00:37 GMT**. It is similar to standard HTTP 'Date' expect that it allows to set it under JavaScript in browser while standard 'Date' is forbidden",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-Host",
            "in": "header",
            "description": "HTTP header element for specification of the domain name of the server. It is similar to standard HTTP 'Host' header but it won't be overridden by proxies. It also allows to set it under JavaScript in browser while standard 'Host' is forbidden",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-User-Agent",
            "in": "header",
            "description": "End user (i.e. PSU) agent information, to be provided if TPP is in session with the PSU",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-Nordea-Originating-User-Ip",
            "in": "header",
            "description": "End user (i.e. PSU) IP address, to be provided if TPP is in session with the PSU",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External Id",
            "required": true,
            "type": "string",
            "x-availabilityInfo": "V1",
            "x-availabilityStatus": "Stable"
          }
        ],
        "responses": {
          "200": {
            "description": "requesting payment status",
            "schema": {
              "$ref": "#/definitions/TransferStatusResponse"
            }
          },
          "400": {
            "description": "Parameters invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized with failure code:\n* error.apikey.missing = Missing API key. This operation requires API key, but it was missing.\n* error.token = Unspecified error with supplied token.\n* error.token.invalid = Missing access token or token did not authorized requested operation. This operation requires valid access token, but it was missing.\n* error.token.expired = Access token has expired.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden with failure code:\n* error.resource.denied = Requested resource is not authorized by access token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "deprecated": false,
        "x-availabilityInfo": "V1",
        "x-availabilityStatus": "Stable"
      }
    }
  },
  "securityDefinitions": {
    "ClientId": {
      "type": "apiKey",
      "name": "X-IBM-Client-Id",
      "in": "header"
    },
    "ClientSecret": {
      "type": "apiKey",
      "name": "X-IBM-Client-Secret",
      "in": "header"
    },
    "Signature": {
      "type": "apiKey",
      "name": "Signature",
      "in": "header"
    }
  },
  "definitions": {
    "AccountNumber": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "example": "DKK | SEK | NOK | EUR",
          "description": "Currency of the payment",
          "enum": [
            "DKK",
            "SEK",
            "NOK",
            "EUR"
          ],
          "x-availabilityStatus": "Stable"
        },
        "value": {
          "type": "string",
          "example": "FI1350001520000081",
          "description": "Actual account number",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "AccountNumber",
      "description": "Account number"
    },
    "Authentication": {
      "type": "object",
      "required": [
        "redirect_uri"
      ],
      "properties": {
        "authentication_method": {
          "type": "string",
          "description": "Authentication Method.",
          "enum": [
            "MTA",
            "MTA_OFF",
            "CCALC",
            "CARD_RDR",
            "QR_RDR",
            "BANKID_NO",
            "BANKIDM_NO",
            "MTA_NO"
          ],
          "x-availabilityStatus": "Stable"
        },
        "redirect_uri": {
          "type": "string",
          "description": "Authentication redirectUri.",
          "x-availabilityStatus": "Stable"
        },
        "state": {
          "type": "string",
          "description": "Authentication state.",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "Authentication",
      "description": "Authentication."
    },
    "CreatePaymentRequest": {
      "type": "object",
      "required": [
        "amount",
        "creditor",
        "currency",
        "debtor",
        "external_id"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "example": 123.45,
          "description": "Amount",
          "x-availabilityStatus": "Stable"
        },
        "creditor": {
          "description": "Creditor",
          "$ref": "#/definitions/PaymentCreditor",
          "x-availabilityStatus": "Stable"
        },
        "currency": {
          "type": "string",
          "example": "DKK | SEK | NOK | EUR",
          "description": "Currency",
          "enum": [
            "DKK",
            "SEK",
            "NOK",
            "EUR"
          ],
          "x-availabilityStatus": "Stable"
        },
        "debtor": {
          "description": "Debtor",
          "$ref": "#/definitions/PaymentDebtor",
          "x-availabilityStatus": "Stable"
        },
        "external_id": {
          "type": "string",
          "example": "d630b00a-227c-474e-8d20-1fc2b7141fdc",
          "description": "External Id",
          "x-availabilityStatus": "Stable"
        },
        "merchant": {
          "type": "string",
          "description": "The merchant or final recipient",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "CreatePaymentRequest",
      "description": "Create payment request."
    },
    "ErrorPayload": {
      "type": "object",
      "properties": {
        "failures": {
          "type": "array",
          "description": "More details on the occurred error",
          "items": {
            "$ref": "#/definitions/Failure"
          },
          "x-availabilityStatus": "Stable"
        },
        "request": {
          "description": "Error details",
          "$ref": "#/definitions/RequestEcho",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "ErrorPayload",
      "description": "Error response body"
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "description": "Payload",
          "$ref": "#/definitions/ErrorPayload",
          "x-availabilityStatus": "Stable"
        },
        "group_header": {
          "description": "Standard format response header",
          "$ref": "#/definitions/ResponseHeader",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "ErrorResponse",
      "description": "Error response"
    },
    "Failure": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Failure code",
          "x-availabilityStatus": "Stable"
        },
        "description": {
          "type": "string",
          "description": "Failure description",
          "x-availabilityStatus": "Stable"
        },
        "path": {
          "type": "string",
          "description": "JSON path of the failing element if applicable",
          "x-availabilityStatus": "Stable"
        },
        "type": {
          "type": "string",
          "description": "Type of the validation error, e.g. NotNull",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "Failure",
      "description": "Validation error"
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "Relative path to the linked resource",
          "x-availabilityStatus": "Stable"
        },
        "rel": {
          "type": "string",
          "description": "Describes the nature of the link, e.g. 'details' for a link to the detailed information of a listed resource.",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "Link",
      "description": "Context specific link (only GET supported)"
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "continuation_key": {
          "type": "string",
          "description": "Resource listing may return a continuationKey if there's more results available. Request may be retried with the continuationKey, but otherwise same parameters, in order to get more results.",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "Pagination",
      "description": "Details of paginated response"
    },
    "PaymentCreditor": {
      "type": "object",
      "properties": {
        "account": {
          "description": "Creditor IBAN account",
          "$ref": "#/definitions/AccountNumber",
          "x-availabilityStatus": "Stable"
        },
        "message": {
          "type": "string",
          "example": "Message for the beneficiary",
          "description": "Creditor message",
          "x-availabilityStatus": "Stable"
        },
        "name": {
          "type": "string",
          "example": "Beneficiary name",
          "description": "Creditor name",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "PaymentCreditor",
      "description": "Creditor"
    },
    "PaymentDebtor": {
      "type": "object",
      "properties": {
        "account": {
          "description": "${PaymentDebtor.account.description}",
          "$ref": "#/definitions/AccountNumber",
          "x-availabilityStatus": "Stable"
        },
        "message": {
          "type": "string",
          "example": "Own message",
          "description": "Debtor message",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "PaymentDebtor",
      "description": "Debtor"
    },
    "PaymentInstructionAccepted": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "array",
          "description": "Links to be followed by clients",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "PaymentInstructionAccepted"
    },
    "RequestEcho": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Original request url",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "RequestEcho",
      "description": "Original request information"
    },
    "ResponseHeader": {
      "type": "object",
      "properties": {
        "creation_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Response creation time",
          "x-availabilityStatus": "Stable"
        },
        "http_code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "HTTP code for response",
          "x-availabilityStatus": "Stable"
        },
        "message_identification": {
          "type": "string",
          "description": "Original request id for correlation purposes",
          "x-availabilityStatus": "Stable"
        },
        "message_pagination": {
          "description": "Details of paginated response",
          "$ref": "#/definitions/Pagination",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "ResponseHeader",
      "description": "External response header"
    },
    "TransferRequest": {
      "type": "object",
      "required": [
        "authentication",
        "payment"
      ],
      "properties": {
        "authentication": {
          "description": "The authentication part ",
          "$ref": "#/definitions/Authentication",
          "x-availabilityStatus": "Stable"
        },
        "payment": {
          "description": "The payment instruction part",
          "$ref": "#/definitions/CreatePaymentRequest",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "TransferRequest",
      "description": "Request a payment instruction to be approved by a PSU"
    },
    "TransferResponse": {
      "type": "object",
      "properties": {
        "group_header": {
          "description": "Standard format response header",
          "$ref": "#/definitions/ResponseHeader",
          "x-availabilityStatus": "Stable"
        },
        "response": {
          "description": "Payload",
          "$ref": "#/definitions/PaymentInstructionAccepted",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "TransferResponse",
      "description": "Response from a payment instruction request"
    },
    "TransferStatus": {
      "type": "object",
      "properties": {
        "external_id": {
          "type": "string",
          "description": "External Id",
          "x-availabilityStatus": "Stable"
        },
        "status": {
          "type": "string",
          "example": "Confirmed",
          "description": "Transfer status description.",
          "enum": [
            "OnHold",
            "Confirmed",
            "Rejected",
            "Paid"
          ],
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "TransferStatus",
      "description": "Transfer status description."
    },
    "TransferStatusResponse": {
      "type": "object",
      "properties": {
        "group_header": {
          "description": "Standard format response header",
          "$ref": "#/definitions/ResponseHeader",
          "x-availabilityStatus": "Stable"
        },
        "response": {
          "description": "Payload",
          "$ref": "#/definitions/TransferStatus",
          "x-availabilityStatus": "Stable"
        }
      },
      "title": "TransferStatusResponse",
      "description": "Get transfer status response description."
    }
  }
}
